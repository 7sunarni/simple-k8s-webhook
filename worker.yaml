---
apiVersion: v1
kind: Namespace
metadata:
  name: ops-debug
  namespace: ops-debug
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUROVENDQWgyZ0F3SUJBZ0lVQVhMT3VjNitKUy9pYWZnZE1yRU56QWdxTWk4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0tqRW9NQ1lHQTFVRUF3d2ZiM0J6TFdSbFluVm5MWGRsWW1odmIyc3ViM0J6TFdSbFluVm5Mbk4yWXpBZQpGdzB5TlRBeE1ESXdNalV6TWpOYUZ3MHpOREV5TXpFd01qVXpNak5hTUNveEtEQW1CZ05WQkFNTUgyOXdjeTFrClpXSjFaeTEzWldKb2IyOXJMbTl3Y3kxa1pXSjFaeTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFERkN2YU82WTg3c2U1cWFFd01ndjlIQVE2VE1TNGoycm1McHlXR0c0UEsxNmZOWEdYTApKcHprMjBjVStNUUg0YVV0a3RpQzV5V0Y3RGJWcTNRR0hIaUY1WkFuR1NEUnEyR0lvZVBPSFc1aUxoWGs3eG1FCm5NcXZMTXpzeWlpZ2JXSDJpcWg4aGRsK0FDVURlOTdUbUwrS3VGSXM1cWV4SnBjMEVBaTRpbXp5VlhUNTlUQUQKS0FMbVN0UzZwNGJ1QWxXSEIvVndnYXZXOStVaERqZGtQM09nSXN0VUxVcGpyL0dPc25sOElZQWNEa3FTUkR1aAphSUxjRXJBVGNoVmRlUGpZckZuS1ROZTBVS1NYWUYzRkI3dm44VDB1TWtJaUlzMEpPM0NiYmtQRStIS3VVTkpwClZWYU5FdGtoU09oVGtiSmJjTjNpZkhKbjNmaEcwMFlJQnZ3bEFnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCVFoKM2JDazFNK1F3My92dE9lWGxXZGZlc3hGSFRBZkJnTlZIU01FR0RBV2dCVFozYkNrMU0rUXczL3Z0T2VYbFdkZgplc3hGSFRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCTWlUcWZEc2FYCnZjdnNsTUJVR3kxVi9tbE4ycFFYV08xWStFbG45Qm52TnIxb2lKeXZBNDliTHJKTVVVUlk1VjNWL2ZhU2xHVVgKandhTVRiVmM2aXMyQkdoQzg2bzgxcmIrS3NEWXBrcEdINVRydDJGYUVIS0QyVFVVMEovKzlmUUNwcTNubFFnRQpHZ0tvZFVidlRwUU9tQTY3WmFLVC9yanhFLytGYWFGTnUvT2Z6TmNBdngvcmozdDNuQ0cwVkRHVFlWVW1weG9vCnFTc1BkQVA3VEFSSXNmU3A5N09Vak1TZnpPWWxScytQdG5lRGpYbWkvZE1pcmcrREh4aEQvUXU4b3JJR2Q4SFoKenBJblV4V3d3TU00REYvdlVDUG85eWh3dGVZNXk4WDR5UXljR2w4V0F2eFdkeHdKa0ZJOGdncFR3V2ZvUTl3VgpkSnFHZmVLTkM5MU0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  server.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiekNDQWxlZ0F3SUJBZ0lVS2pxY01LUE54Um5tbGhWSUZYRENpTTNqSjFVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0tqRW9NQ1lHQTFVRUF3d2ZiM0J6TFdSbFluVm5MWGRsWW1odmIyc3ViM0J6TFdSbFluVm5Mbk4yWXpBZQpGdzB5TlRBeE1ESXdNalV6TWpOYUZ3MHpOREV5TXpFd01qVXpNak5hTUNveEtEQW1CZ05WQkFNTUgyOXdjeTFrClpXSjFaeTEzWldKb2IyOXJMbTl3Y3kxa1pXSjFaeTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDKzZrTVdzbHVWYnpFeU5zOEVNUnkyVDZSVmlXVFQzeTRwb2JFcm1KSDk5RnVON04wRQpkMjljTjF4Z2lZQzh4MmRQejgwRW5lRjdKRlhDMk90Z2UzbzlHWkRKTmQ5OUVjYnFGc20vT0Y0dDFmZTRjSHZSCnVGVThqWjBKbEN6ZUZ2dzBGMVlFUkQwUy91VFZqZnFVR3dDMzd5SlY4dFpjTkZhdnlhenZFY29zQmFMdEUzY1kKRlgrSmk3eGNVeGs3V0F2dEE3NXF0aG9TZ1F1Mkp3Z0t2U3ZTYWpobXJZamdQZzNaYnVjemxoa3Q4dHh1ODlJMAp3UDlBK0g3OG4vSVNCTW4xSG9UTmhyenZsQXZRMjFZV09SUDE1UDBuSkZ6Y25JQzBsSEgzYytpSjB6bDR4dnd0CmsrbzdUYXNZRjNhMlhORTBSbUt4cG13UE8yRHJRdTBzVmx2M0FnTUJBQUdqZ1l3d2dZa3dDUVlEVlIwVEJBSXcKQURBTEJnTlZIUThFQkFNQ0JlQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3V2dZRFZSMFJCRk13VVlJUgpiM0J6TFdSbFluVm5MWGRsWW1odmIydUNHMjl3Y3kxa1pXSjFaeTEzWldKb2IyOXJMbTl3Y3kxa1pXSjFaNElmCmIzQnpMV1JsWW5WbkxYZGxZbWh2YjJzdWIzQnpMV1JsWW5WbkxuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQWVGTExNTFZuZnBucWRLQUo4L1FaajBiWXUrUUZNUkh1alYwMnVlbG1WYTFVN2M0RGd6VHhmdTE5TmZtaApGWTZhY09ldWp4UmNhakpoak9GanZjeW16Tk4wVXQwRC9wRmNCVkhzOFdOYVJGaXZSMmtJWWhLOTJYaGxzUW9XClBCRWUybGJzdTFmZW9ySnROL1BxS2ZwMzE2eWtKazZwTzZxV0l2SHo1eld0NlVSTUFwT2F5UVpRRjZPNEpMYUMKZ0RBWVpvWFpqWmV5UE1Ba3hEQnI1Tm94TjVJWjAzcS8xNTkzZGZUb2VQQWxnQ2U3R0trVU5OYS9weEFTdktCdApQSUpnRU84QVR0WXdVc3lDNmM2czdEM3paVEFTaGNjZFR5Znc4RGoyZXdkbktadFJIV2FucXpWRnU5NzJxODVZCkFPWDFiMnloNTJ3emwwWFFCOXVNZlVTNVhBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  server.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdnVwREZySmJsVzh4TWpiUEJERWN0aytrVllsazA5OHVLYUd4SzVpUi9mUmJqZXpkCkJIZHZYRGRjWUltQXZNZG5UOC9OQkozaGV5UlZ3dGpyWUh0NlBSbVF5VFhmZlJIRzZoYkp2emhlTGRYM3VIQjcKMGJoVlBJMmRDWlFzM2hiOE5CZFdCRVE5RXY3azFZMzZsQnNBdCs4aVZmTFdYRFJXcjhtczd4SEtMQVdpN1JOMwpHQlYvaVl1OFhGTVpPMWdMN1FPK2FyWWFFb0VMdGljSUNyMHIwbW80WnEySTRENE4yVzduTTVZWkxmTGNidlBTCk5NRC9RUGgrL0oveUVnVEo5UjZFellhODc1UUwwTnRXRmprVDllVDlKeVJjM0p5QXRKUng5M1BvaWRNNWVNYjgKTFpQcU8wMnJHQmQydGx6Uk5FWmlzYVpzRHp0ZzYwTHRMRlpiOXdJREFRQUJBb0lCQUh4YzE1VDZYRVJNcVV4ZgpmWnpxYlJ5cFpwQTlyc3VCVDIzWklUTVg4TW53R28rcUl4TWN4aExaRVRqbGVWSC94dUdycUk2QVZmaEVaQVZJCkRwUEwrNFcvbUp3cGxzcS9BTWRPVHQ5Y1ZhVWdBMzFHOExGZGxWQ2JveGN4U2NUbVRpV1VxZmlmaHZWUHl6cjkKZ0tSbnJxRWlpa2hZcHFCcmk2aDVCRWk3V3VvdkpCbnhXckx3QWl3di9raU14Nmd3Qkp2bzJVU0YzZ0g3QnM0SgoxU3FUYU5YWkR2Nkh3dkNwdGtYcENWanNnekNybDd0cFVOUWR3UE5WTmEveTNIVVJIcmJBZlRORWZwaHVHNzlRCnBjMURUbmxKemVWd0Z4bWQ3cjJ4aXBnRkY0NDRYR3IvamZ2NjZadVhTemNWMTY0em1sZ0szVmREVVh3eUt4VnQKN3A4REUra0NnWUVBOWVhNWxVS1RJaUNaZ3pZaVZTdWRaaEoyQkFRZUk4eFJwRzJKbERCKzdMZ2orRElSSEdpSgppOVdFSTViWlFWK2k5UldOZ0ZFUXBaM3pXZ0RPZEFBZVpBVVZPSzBaVmxDNjg4SEtJejFpUWljdFA2NldvbTdhCmZyS2tpSEhpemN1M1RkZ3VtaCt4WnZuQUxTMU1IdUxKb2dYdVMrWkl6Si9rR1lUc29HUks4UDBDZ1lFQXhzRngKRVN6ZWdmYkRxYmcvc2pRdG9pMmlMT2M1dGVoa2QrNEZXUnIxOWhTckVuNzg4cVQvMWxqejQ2MGI4clNabjQxWgpCNjlsSzYyeGE0dGltZXlwN0lzc01SYnNzblFsN1ZZd3REWTNuS2YvQTYxcmFCWGd0VXVwMVoyZ2daZ1YwdllUCm4vV3djWmxmaW81Qk5wZlk2TVYwNkFPcDVSSHp5QzlKMVM0U2ZRTUNnWUVBdVBwN21NQ2dGZ2dYOHhDQit6ZjQKQzVUUG1tM09qbmRnNHlSVFhscXM0RDRWTU52WTYxbm9Qbnk4RGxtbnpQbTRpRTFTU0xpeW9TT1VzSnZ5c21oMApkQ0V1dVpmZGU0VDNYZTdsdEdTMHliYlczeFRpMUFZMzd4OUxqaWk5eUxuNmhtQ2RqZXRSZEhsa0M1Z0xyeUJECk5kTG9VOGhEODBwRU9MNDVrdDVmVWJFQ2dZQW5SdHpvTHZ5OXBCMGdjZmVzYUtGSDlrcWhJd1NGalNvbGhSVHIKZWVkM1BMaGR6RmlDUHRjTDdjSXNrTzMvOVc2U1dDVnEzbDlZMVZkRlVHTW8xZHJ5a3NJbDVVamJMeGE3b3hlMgoxU3dDT2pTcjdsNVdVRlI2bnp3dHFadXBZSHVYbCtkaTZmTjNUMzdRNjdHNWJ5Si9SVjRINTRsd2FpN0p0WWFhCnFTTWdMd0tCZ0FFWEVlaXY0T0RXRXVyL1Frc0hMZWtTci9kRWs0elNUMzBXQVh1ZlU2MVVtZ2M4SExpRUc1ZHUKeTRFREljcDQreVBjWjQyS3hweFRyL0xWVE03YUY4L0VlVll1R0FmVk95VW1kUS9FcGpIRjFCVm5iRGs2NVdBRQozSEtkRG1jNW9veHUxN2x2c3U5ZTZEeFhrNFZJQmlJTmVON3JETWUweW54M1NrNk0vb3poCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: ops-debug-webhook
  namespace: ops-debug
type: Opaque
---
apiVersion: v1
kind: Pod
metadata:
  name: ops-debug-webhook
  namespace: ops-debug
  labels:
    app: ops-debug-webhook
spec:
  containers:
  - command:
    - bash 
    - -c 
    - exec python server/server.py
    image: python:3.8
    imagePullPolicy: IfNotPresent
    name: ops-webhook
    volumeMounts:
    - mountPath: /server
      name: server
    - mountPath: /certs
      name: cert
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  schedulerName: default-scheduler
  terminationGracePeriodSeconds: 30
  volumes:
  - name: server
    configMap:
      name: ops-debug
  - name: cert
    secret:
      secretName: ops-debug-webhook
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ops-debug-webhook
  name: ops-debug-webhook
  namespace: ops-debug
spec:
  ports:
  - name: webhook
    port: 6443
    protocol: TCP
    targetPort: 6443
  selector:
    app: ops-debug-webhook
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ops-debug
  namespace: ops-debug
data:
  server.py: |
    import http.server
    import ssl
    import json
    
    class SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
        # For response Aggregate APISerivce request
        def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                response = {
                    "kind": "APIResourceList",
                    "apiVersion": "v1",
                    "groupVersion": "ops-debug.ctyun.cn/v1alpha1",
                    "resources": [
                        {
                        "name": "backups",
                        "singularName": "",
                        "namespaced": True,
                        "kind": "Backup",
                        "verbs": [
                            "create",
                            "delete",
                            "deletecollection",
                            "get",
                            "list",
                            "patch",
                            "update",
                            "watch"
                        ],
                        "storageVersionHash": "IWRSucd/Dbc="
                        },
                        {
                            "name": "backups/status",
                            "singularName": "",
                            "namespaced": True,
                            "kind": "Backup",
                            "verbs": [
                                "get",
                                "patch",
                                "update"
                        ]
                        }
                    ]
                }
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            try:
                request_json = json.loads(post_data.decode('utf-8'))
                pretty_json = json.dumps(request_json, ensure_ascii=False, indent=4, sort_keys=True)
                print(f"Mutate Request: {pretty_json}")
                uid = request_json["request"]["uid"]
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                response = {
                    "apiVersion": "admission.k8s.io/v1",
                    "kind": "AdmissionReview",
                    "response": {
                        "uid": uid,
                        "allowed": True
                    }
                }
                self.wfile.write(json.dumps(response).encode('utf-8'))
            # TODO: fix here
            except json.JSONDecodeError as e:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                response = {
                    'status': 'error',
                    'message': str(e)
                }
                self.wfile.write(json.dumps(response).encode('utf-8'))
    
    
    def run_https_server(port, handler_class=SimpleHTTPRequestHandler):
        server_address = ('', port)
        httpd = http.server.HTTPServer(server_address, handler_class)
        httpd.socket = ssl.wrap_socket(httpd.socket,
                                       keyfile='/certs/server.key',
                                       certfile='/certs/server.crt',
                                       server_side=True)
        print(f'Starting HTTPS server on port {port}...')
        httpd.serve_forever()
    if __name__ == '__main__':
        PORT = 6443
        run_https_server(PORT)
